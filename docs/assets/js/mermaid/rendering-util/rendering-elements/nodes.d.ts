export const shapes: {
    state: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    stateStart: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    stateEnd: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    forkJoin: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { dir, config: { state, themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    choice: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    note: (parent: SVGAElement, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => Promise<any>;
    rectWithTitle: (parent: SVGElement, node: import("../types.js").Node) => Promise<any>;
    roundedRect: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    squareRect: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    rectangle: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    rect: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    process: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    proc: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    rounded: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    event: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    stadium: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    pill: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    terminal: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    subroutine: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'framed-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'fr-rect': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    subprocess: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    subproc: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    cylinder: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    db: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    cyl: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    database: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    question: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    diam: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    diamond: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    decision: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    hexagon: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    hex: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    prepare: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    lean_right: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'lean-r': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'lean-right': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'in-out': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    lean_left: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'lean-l': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'lean-left': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'out-in': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    trapezoid: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'trap-b': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'trapezoid-bottom': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    priority: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    inv_trapezoid: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'inv-trapezoid': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'trapezoid-top': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'trap-t': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    manual: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    doublecircle: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'dbl-circ': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'double-circle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    circle: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    circ: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    rect_left_inv_arrow: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    odd: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    card: typeof card;
    'notched-rectangle': typeof card;
    'notch-rect': typeof card;
    'lined-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'lin-rect': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'lin-proc': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'lined-process': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'shaded-process': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'small-circle': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'sm-circ': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    start: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    stop: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'framed-circle': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'fr-circ': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    join: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { dir, config: { state, themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    fork: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { dir, config: { state, themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    comment: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'brace-l': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    bolt: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'com-link': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'lightning-bolt': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    doc: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    document: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    delay: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'half-rounded-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'horizontal-cylinder': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'h-cyl': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    das: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'lined-cylinder': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'lin-cyl': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    disk: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'curved-trapezoid': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'curv-trap': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    display: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'divided-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'div-rect': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'div-proc': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'divided-process': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    triangle: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    tri: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    extract: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'window-pane': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'win-pane': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'internal-storage': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'f-circ': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    junction: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'filled-circle': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables } }: import("../types.js").ShapeRenderOptions) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'lin-doc': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'lined-document': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'notched-pentagon': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'notch-pent': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'loop-limit': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'flipped-triangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'flip-tri': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'manual-file': (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    'sloped-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'sl-rect': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'manual-input': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    docs: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    documents: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'st-doc': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'stacked-document': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    processes: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    procs: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'stacked-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'st-rect': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    flag: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'paper-tape': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'bow-tie-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'bow-rect': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'stored-data': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'crossed-circle': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'cross-circ': (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    summary: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node) => import("d3-selection").Selection<SVGGElement, unknown, Element | null, unknown>;
    'tag-doc': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'tagged-document': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'tag-rect': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'tagged-rectangle': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'tag-proc': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    'tagged-process': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    hourglass: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    collate: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    text: typeof text;
    anchor: (parent: SVGAElement, node: import("../types.js").Node) => Promise<SVGAElement>;
    brace: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    labelRect: (parent: SVGElement, node: import("../types.js").Node) => Promise<any>;
    'brace-r': (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    braces: (parent: SVGAElement, node: import("../types.js").Node) => Promise<any>;
    iconSquare: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables, flowchart } }: import("../types.js").ShapeRenderOptions) => Promise<any>;
    iconCircle: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables, flowchart } }: import("../types.js").ShapeRenderOptions) => Promise<any>;
    icon: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables, flowchart } }: import("../types.js").ShapeRenderOptions) => Promise<any>;
    iconRounded: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { themeVariables, flowchart } }: import("../types.js").ShapeRenderOptions) => Promise<any>;
    imageSquare: (parent: import("../../mermaid.js").SVG, node: import("../types.js").Node, { config: { flowchart } }: import("../types.js").ShapeRenderOptions) => Promise<any>;
};
export function insertNode(elem: any, node: any, renderOptions: any): Promise<any>;
export function setNodeElem(elem: any, node: any): void;
export function clear(): void;
export function positionNode(node: any): any;
import { card } from './shapes/card.js';
import { text } from './shapes/text.js';
